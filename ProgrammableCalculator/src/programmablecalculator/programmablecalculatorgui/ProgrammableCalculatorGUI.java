/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package programmablecalculator.programmablecalculatorgui;

/**
 *
 * @author bad-b
 */
import java.awt.event.KeyEvent;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import static javax.swing.JOptionPane.showMessageDialog;
import programmablecalculator.programmablecalculatorcontroller.ProgrammableCalculatorController;
import java.text.NumberFormat;
import java.util.Iterator;
import java.util.Locale;
import javax.swing.DefaultListModel;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexFormat;
public class ProgrammableCalculatorGUI extends javax.swing.JFrame {
    private DefaultListModel<String> visibleStackModel;
    public ProgrammableCalculatorController controller;
    
    private final String bothParts;
    private final String onlyRealPart;
    private final String onlyImmaginaryPart;
    /**
     * Creates new form ProgrammableCalculatorGUI
     */
    /*if find bothParts  
    matchergroup(0) contains a letter -> error
    matchergroup(1) contains a letter except i -> error
    
    */
    
    public ProgrammableCalculatorGUI() {
        visibleStackModel=new DefaultListModel<>();
        initComponents();
        visibleStack.setModel(visibleStackModel);
        controller= new ProgrammableCalculatorController();
        bothParts="(^[-]?\\d+\\.?\\d*)([-|+]+\\d*\\.?\\d*)[i$]+";
        onlyRealPart="^[-]?\\d+\\.?\\d*$";
        onlyImmaginaryPart="^[-]?\\d*\\.?\\d*[i{1}$]+";
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CalculatorPanel = new javax.swing.JPanel();
        inputField = new javax.swing.JTextField();
        processInputButton = new javax.swing.JButton();
        jButtonPlus = new javax.swing.JButton();
        jButtonMinus = new javax.swing.JButton();
        jButtonMultiply = new javax.swing.JButton();
        jButtonDivision = new javax.swing.JButton();
        jButtonClear = new javax.swing.JButton();
        jButtonDrop = new javax.swing.JButton();
        jButtonDup = new javax.swing.JButton();
        jButtonSwap = new javax.swing.JButton();
        jButtonSquareRoot = new javax.swing.JButton();
        jButtonInvertSign = new javax.swing.JButton();
        jLabelStackOperations = new javax.swing.JLabel();
        jLabelVisibleStack = new javax.swing.JLabel();
        jLabelNumberOperations = new javax.swing.JLabel();
        jButtonOver = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        visibleStack = new javax.swing.JList<String>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ProgrammableCalculator");

        CalculatorPanel.setBackground(new java.awt.Color(51, 51, 255));
        CalculatorPanel.setToolTipText("");
        CalculatorPanel.setName("ProgrammableCalculator"); // NOI18N
        CalculatorPanel.setPreferredSize(new java.awt.Dimension(500, 500));

        inputField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputFieldKeyPressed(evt);
            }
        });

        processInputButton.setBackground(new java.awt.Color(51, 51, 240));
        processInputButton.setForeground(new java.awt.Color(255, 255, 255));
        processInputButton.setText("Insert");
        processInputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processInputButtonActionPerformed(evt);
            }
        });

        jButtonPlus.setBackground(new java.awt.Color(51, 51, 255));
        jButtonPlus.setForeground(new java.awt.Color(255, 255, 255));
        jButtonPlus.setText("+");
        jButtonPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlusActionPerformed(evt);
            }
        });

        jButtonMinus.setBackground(new java.awt.Color(51, 51, 240));
        jButtonMinus.setForeground(new java.awt.Color(255, 255, 255));
        jButtonMinus.setText("-");
        jButtonMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMinusActionPerformed(evt);
            }
        });

        jButtonMultiply.setBackground(new java.awt.Color(51, 51, 240));
        jButtonMultiply.setForeground(new java.awt.Color(255, 255, 255));
        jButtonMultiply.setText("*");
        jButtonMultiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMultiplyActionPerformed(evt);
            }
        });

        jButtonDivision.setBackground(new java.awt.Color(51, 51, 240));
        jButtonDivision.setForeground(new java.awt.Color(255, 255, 255));
        jButtonDivision.setText("/");
        jButtonDivision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDivisionActionPerformed(evt);
            }
        });

        jButtonClear.setBackground(new java.awt.Color(51, 51, 240));
        jButtonClear.setForeground(new java.awt.Color(255, 255, 255));
        jButtonClear.setText("CLEAR");
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });

        jButtonDrop.setBackground(new java.awt.Color(51, 51, 240));
        jButtonDrop.setForeground(new java.awt.Color(255, 255, 255));
        jButtonDrop.setText("DROP");
        jButtonDrop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDropActionPerformed(evt);
            }
        });

        jButtonDup.setBackground(new java.awt.Color(51, 51, 240));
        jButtonDup.setForeground(new java.awt.Color(255, 255, 255));
        jButtonDup.setText("DUP");
        jButtonDup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDupActionPerformed(evt);
            }
        });

        jButtonSwap.setBackground(new java.awt.Color(51, 51, 240));
        jButtonSwap.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSwap.setText("SWAP");
        jButtonSwap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSwapActionPerformed(evt);
            }
        });

        jButtonSquareRoot.setBackground(new java.awt.Color(51, 51, 240));
        jButtonSquareRoot.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSquareRoot.setText("sqrt");
        jButtonSquareRoot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSquareRootActionPerformed(evt);
            }
        });

        jButtonInvertSign.setBackground(new java.awt.Color(51, 51, 240));
        jButtonInvertSign.setForeground(new java.awt.Color(255, 255, 255));
        jButtonInvertSign.setText("+/-");
        jButtonInvertSign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInvertSignActionPerformed(evt);
            }
        });

        jLabelStackOperations.setForeground(new java.awt.Color(255, 255, 255));
        jLabelStackOperations.setText("Stack Operations");

        jLabelVisibleStack.setForeground(new java.awt.Color(255, 255, 255));
        jLabelVisibleStack.setText("Calculator's stack");

        jLabelNumberOperations.setBackground(new java.awt.Color(51, 51, 240));
        jLabelNumberOperations.setForeground(new java.awt.Color(255, 255, 255));
        jLabelNumberOperations.setText("Number Operations");

        jButtonOver.setBackground(new java.awt.Color(51, 51, 240));
        jButtonOver.setForeground(new java.awt.Color(255, 255, 255));
        jButtonOver.setText("OVER");
        jButtonOver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CalculatorPanelLayout = new javax.swing.GroupLayout(CalculatorPanel);
        CalculatorPanel.setLayout(CalculatorPanelLayout);
        CalculatorPanelLayout.setHorizontalGroup(
            CalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CalculatorPanelLayout.createSequentialGroup()
                .addComponent(jButtonSquareRoot, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 712, Short.MAX_VALUE))
            .addGroup(CalculatorPanelLayout.createSequentialGroup()
                .addGroup(CalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelVisibleStack, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(CalculatorPanelLayout.createSequentialGroup()
                        .addComponent(jLabelNumberOperations)
                        .addGap(284, 284, 284)
                        .addGroup(CalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelStackOperations)
                            .addGroup(CalculatorPanelLayout.createSequentialGroup()
                                .addGroup(CalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jButtonSwap, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonClear, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(25, 25, 25)
                                .addGroup(CalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(CalculatorPanelLayout.createSequentialGroup()
                                        .addComponent(jButtonDrop)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButtonDup))
                                    .addComponent(jButtonOver))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(CalculatorPanelLayout.createSequentialGroup()
                .addGroup(CalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CalculatorPanelLayout.createSequentialGroup()
                        .addComponent(jButtonPlus, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addGroup(CalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonInvertSign, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(CalculatorPanelLayout.createSequentialGroup()
                                .addComponent(jButtonMinus, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(jButtonMultiply, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(jButtonDivision, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(inputField, javax.swing.GroupLayout.PREFERRED_SIZE, 627, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(processInputButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );
        CalculatorPanelLayout.setVerticalGroup(
            CalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CalculatorPanelLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(CalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(processInputButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNumberOperations)
                    .addComponent(jLabelStackOperations))
                .addGap(5, 5, 5)
                .addGroup(CalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonPlus)
                    .addComponent(jButtonMinus)
                    .addComponent(jButtonMultiply)
                    .addComponent(jButtonDivision)
                    .addComponent(jButtonClear)
                    .addComponent(jButtonDrop)
                    .addComponent(jButtonDup))
                .addGap(18, 18, 18)
                .addGroup(CalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSquareRoot)
                    .addComponent(jButtonInvertSign)
                    .addComponent(jButtonSwap)
                    .addComponent(jButtonOver))
                .addGap(35, 35, 35)
                .addComponent(jLabelVisibleStack)
                .addContainerGap())
        );

        jScrollPane1.setViewportView(visibleStack);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(CalculatorPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 781, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(CalculatorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonDivisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDivisionActionPerformed
        checkOperationStatusAndUpdate("/");
    }//GEN-LAST:event_jButtonDivisionActionPerformed

    private void jButtonMultiplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMultiplyActionPerformed
        checkOperationStatusAndUpdate("*");
    }//GEN-LAST:event_jButtonMultiplyActionPerformed

    private void ProcessInputButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ProcessInputButtonKeyPressed

    }//GEN-LAST:event_ProcessInputButtonKeyPressed

    private void processInputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processInputButtonActionPerformed
        String message="";
        String input;
        input=this.checkInputField();
        if (input!=null){
           checkOperationStatusAndUpdate(input);
        }
        inputField.setText("");
        
    }//GEN-LAST:event_processInputButtonActionPerformed

    private void InputFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputFieldActionPerformed

    }//GEN-LAST:event_InputFieldActionPerformed

    private void jButtonSwapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSwapActionPerformed
        checkOperationStatusAndUpdate("swap");
    }//GEN-LAST:event_jButtonSwapActionPerformed

    private void jButtonPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlusActionPerformed
       checkOperationStatusAndUpdate("+");
    }//GEN-LAST:event_jButtonPlusActionPerformed

    private void jButtonMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMinusActionPerformed
       checkOperationStatusAndUpdate("-");
    }//GEN-LAST:event_jButtonMinusActionPerformed

    private void jButtonSquareRootActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSquareRootActionPerformed
       checkOperationStatusAndUpdate("sqrt");
    }//GEN-LAST:event_jButtonSquareRootActionPerformed

    private void jButtonInvertSignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInvertSignActionPerformed
       checkOperationStatusAndUpdate("+-");
    }//GEN-LAST:event_jButtonInvertSignActionPerformed

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        checkOperationStatusAndUpdate("clear");
    }//GEN-LAST:event_jButtonClearActionPerformed

    private void jButtonDropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDropActionPerformed
        checkOperationStatusAndUpdate("drop");
    }//GEN-LAST:event_jButtonDropActionPerformed

    private void jButtonDupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDupActionPerformed
        checkOperationStatusAndUpdate("dup");
    }//GEN-LAST:event_jButtonDupActionPerformed

    private void inputFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputFieldKeyPressed
        if(evt.getKeyCode()== KeyEvent.VK_ENTER){
             String message="";
             String input;
             input=checkInputField();
            if (input!=null){
               checkOperationStatusAndUpdate(input);
        }
        inputField.setText("");
        }
            
    }//GEN-LAST:event_inputFieldKeyPressed

    private void jButtonOverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOverActionPerformed
       checkOperationStatusAndUpdate("over");
    }//GEN-LAST:event_jButtonOverActionPerformed
    protected String checkInputField(){
     String input;
     String numberWithNoSpace=inputField.getText().replaceAll("\\s","");
     String inputText=inputField.getText().toLowerCase();
     if(inputText.equals("+") || inputText.equals("-") || inputText.equals("*") || inputText.equals("/") || inputText.equals("sqrt") || inputText.equals("+-")
             || inputText.equals("clear") || inputText.equals("drop") || inputText.equals("dup") || inputText.equals("over") 
             || inputText.equals("swap"))   //check for an input that represents an operation
         return inputText;
    
     else{
         input=checkNumberProcess(inputText);
         return input;
     }
    }    
    
    public void setTextField(String text){
        inputField.setText(text);
    }
    public DefaultListModel getModel(){
        return visibleStackModel;
    }
    
    protected void update(){
        ComplexFormat format;
        NumberFormat nf= NumberFormat.getInstance(new Locale("en","US"));
        format=new ComplexFormat(nf);
        visibleStackModel.clear();
        Iterator<Complex> stack = controller.getNumbersStack();
        int i = 0;
        while(stack.hasNext() && i<12) {
            visibleStackModel.addElement(format.format(stack.next()));
            i+=1;
        }
    }
    private String checkNumberProcess(String inputText){
        Pattern inputCheck=Pattern.compile(bothParts); //input sequence of a complex number with both real and immaginary part
        Matcher inputMatcher=inputCheck.matcher(inputText);
        if(inputMatcher.find()) {
                 if(inputText.contains("+i") || inputText.contains("-i")){
                     return inputText.replaceAll("[i$]", "1.0i"); //modify the input in order to get the right format
                 }else{
                     return inputText;
                 }   
            
        }    
        inputCheck=Pattern.compile(onlyRealPart); //input sequence of a complex number with only real part
        inputMatcher=inputCheck.matcher(inputText);
        if(inputMatcher.find())
            return inputText;
        
        inputCheck=Pattern.compile(onlyImmaginaryPart); // input sequence of a complex number with only immaginary part
        inputMatcher=inputCheck.matcher(inputText);
        if (inputMatcher.find()){
            if(inputText.equals("i")){
                String input=inputText.replace("i","1.0i");
                return "0.0+" + input;
            }
            else if(inputText.equals("-i")){
                    String input=inputText.replace("i","1.0i");
                    return "0.0" + input;
            }    
            else if( inputText.contains("+i") || inputText.contains("-i")){
                return inputText.replace("i","1.0i");
            
            }
            else
                if(inputText.startsWith("-"))
                    return "0.0"+inputText;
                else
                    return "0.0+"+inputText;
            
        }    
        else{
            showMessageDialog(null,"Errore nel formato del numero o dell'operazione");
            return null;
        } 
    
    }
    protected void checkOperationStatusAndUpdate(String input){
        String message=controller.elaborateInput(input);
        if(message!=null)
            showMessageDialog(null,message);
        else
            update();
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProgrammableCalculatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProgrammableCalculatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProgrammableCalculatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProgrammableCalculatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProgrammableCalculatorGUI().setVisible(true);
            }
        });
    }
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CalculatorPanel;
    private javax.swing.JTextField inputField;
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonDivision;
    private javax.swing.JButton jButtonDrop;
    private javax.swing.JButton jButtonDup;
    private javax.swing.JButton jButtonInvertSign;
    private javax.swing.JButton jButtonMinus;
    private javax.swing.JButton jButtonMultiply;
    private javax.swing.JButton jButtonOver;
    private javax.swing.JButton jButtonPlus;
    private javax.swing.JButton jButtonSquareRoot;
    private javax.swing.JButton jButtonSwap;
    private javax.swing.JLabel jLabelNumberOperations;
    private javax.swing.JLabel jLabelStackOperations;
    private javax.swing.JLabel jLabelVisibleStack;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processInputButton;
    private javax.swing.JList<String> visibleStack;
    // End of variables declaration//GEN-END:variables
}
